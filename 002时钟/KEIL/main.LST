C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include <string.h>
   3          #include <consts.h>
   4          //定义类型别名
   5          #define uchar unsigned char
   6          #define uint unsigned int        
   7          
   8          void delay(uint time);
   9          uint to_int(uchar ch);
  10          uchar to_char(uint i);
  11          uint is_leap_year(uint year);
  12          
  13          void write_com(uchar com);
  14          void write_data(uchar datas);
  15          void write_data_pos(uint pos,uchar datas);
  16          void write_string(uchar *str);
  17          uchar read_data();
  18          uchar read_data_pos(uint pos);
  19          uint read_pointer();
  20          
  21          uint read_time(uint seq);
  22          uint get_next_time(uint time,uint seq);
  23          void refresh_time(uint seq);
  24          
  25          uint check_init_data();
  26          
  27          void display_init();
  28          void timer_init();
  29          void init();
  30          uint key_scan();
  31          void setting(uint key);
  32          void print_date_time(uchar *date,uchar *time);
  33          
  34          void start();
  35          void stop();
  36          void shutdown();
  37          void storage_curr_time();
  38          void adjust_time();
  39          void confirm_time();
  40          void shift_left();
  41          void shift_right();
  42          void digit_up();
  43          void digit_down();
  44          
  45          uint check_datetime();
  46          void reset_time_from_store();
  47          
  48          uint get_next_digit(uint curr_digit,uint curr_pointer);
  49          uint get_prev_digit(uint curr_digit,uint curr_pointer);
  50          
  51          struct DateTime get_date_time(uint *date_time);
  52          
  53          //1602
  54          sbit en = P3^5;
  55          sbit rs = P3^6;
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 2   

  56          sbit rw = P3^7;
  57          //定时器
  58          uchar count = 0;
  59          //每个月的天数数组
  60          uint xdata month_day_arr[] = MONTH_DAY_ARR;
  61          //设置状态，默认不在设置状态
  62          bit setting_status = 0;
  63          //设置前的时间状态，用以还原时间
  64          uint curr_date_time_arr[DATE_TIME_DIGIT_COUNT];
  65          //日期时间结构体
  66          typedef struct DateTime{
  67                  uchar *date;
  68                  uchar *time;
  69          };
  70          
  71          uint code position_arr[] = POSITION_ARRAY;
  72          uint code position_max_value_arr[] = POSITION_MAX_VALUE_ARRAY;
  73          uint code position_min_value_arr[] = POSITION_MIN_VALUE_ARRAY;
  74          
  75          void main(){
  76   1              uint key;
  77   1      
  78   1              //显示器初始化
  79   1              display_init();
  80   1      
  81   1              //启动后马上检查初始数据，如果错误，显示错误信息
  82   1              if(check_init_data()){
  83   2                      write_string(STRING_OUT_OF_BOUND);
  84   2                      while(1);
  85   2              }         
  86   1              //时钟初始化：写入原始设置时间
  87   1              init();
  88   1              timer_init();
  89   1              start();        
  90   1      
  91   1              //检测按键
  92   1              while(1){
  93   2                      key = key_scan();
  94   2                      setting(key);
  95   2              }
  96   1      }
  97          
  98          /*定时器50ms*/
  99          void timer0() interrupt 1{
 100   1              if((count++) < 13){
 101   2                      return;
 102   2              }
 103   1              count = 0;
 104   1              refresh_time(SECOND_SEQ);               
 105   1      }
 106          
 107          /*启动计时*/
 108          void start(){
 109   1              TR0 = 1;
 110   1      }
 111          
 112          /*停止计时*/
 113          void stop(){
 114   1              TR0 = 0;
 115   1      }
 116          
 117          /*关机*/
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 3   

 118          void shutdown(){
 119   1              write_com(0x08);
 120   1      }
 121          
 122          /*扫描键盘*/
 123          uint key_scan(){
 124   1              if((P1&0x3f) != 0x3f){
 125   2                      delay(150);
 126   2                      if((P1&0x3f) != 0x3f){
 127   3                              return P1&0x3f;
 128   3                      }
 129   2              }
 130   1              return 0;
 131   1      }
 132          
 133          /*设置*/
 134          void setting(uint key){
 135   1              switch(key){
 136   2                      case 0x2f:
 137   2                              if(setting_status){
 138   3                                      setting_status = 0;
 139   3                                      confirm_time();
 140   3                              }else{
 141   3                                      setting_status = 1;
 142   3                                      //调整时间前将当前时间存储下来，以备还原使用
 143   3                                      storage_curr_time();
 144   3                                      adjust_time();  
 145   3                              }
 146   2                              break;
 147   2                      //闹钟设置
 148   2                      case 0x1f:
 149   2                              //clock setting
 150   2                              break;
 151   2                      case 0x3d:
 152   2                              if(setting_status){
 153   3                                      digit_up();
 154   3                              }
 155   2                              break;
 156   2                      case 0x3b:
 157   2                              shift_right();
 158   2                              break;
 159   2                      case 0x37:
 160   2                              if(setting_status){
 161   3                                      digit_down();
 162   3                              }
 163   2                              break;
 164   2                      case 0x3e:
 165   2                              if(setting_status){
 166   3                                      shift_left();
 167   3                              }
 168   2                              break;  
 169   2                      default:
 170   2                              break;
 171   2              }       
 172   1      }
 173          
 174          /*储存当前的时间信息*/
 175          void storage_curr_time(){
 176   1              curr_date_time_arr[0] = read_time(YEAR_SEQ);
 177   1              curr_date_time_arr[1] = read_time(MONTH_SEQ);
 178   1              curr_date_time_arr[2] = read_time(DAY_SEQ);
 179   1              curr_date_time_arr[3] = read_time(HOUR_SEQ);
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 4   

 180   1              curr_date_time_arr[4] = read_time(MINUTE_SEQ);
 181   1              curr_date_time_arr[5] = read_time(SECOND_SEQ);  
 182   1      }
 183          
 184          /*调整时间*/
 185          void adjust_time(){
 186   1              //停止计时，显示光标，并将光标放置在秒的低位位置
 187   1              stop();
 188   1              write_com(0x0f);
 189   1              write_com(SECOND_LOW_POSITION);
 190   1      }
 191          
 192          /*确认时间，调整时间完成*/
 193          void confirm_time(){
 194   1              //开始计时，隐藏光标
 195   1              write_com(0x0c);
 196   1              //确认时间前先检查调整的时间是否正确
 197   1              if(!check_datetime()){
 198   2                      //时间修改错误，从存储区恢复
 199   2                      print_date_time(" Setting error!",NULL);
 200   2                      delay(2000);
 201   2                      reset_time_from_store();
 202   2              }
 203   1              start();        
 204   1      }
 205          
 206          /*检查日期时间是否符合规范*/
 207          uint check_datetime(){
 208   1              uint year,month,day,hour,minute,second;
 209   1              year = read_time(YEAR_SEQ);     
 210   1              month = read_time(MONTH_SEQ);
 211   1              day = read_time(DAY_SEQ);
 212   1              hour = read_time(HOUR_SEQ);
 213   1              minute = read_time(MINUTE_SEQ);
 214   1              second = read_time(SECOND_SEQ);
 215   1              //检查范围是否超出
 216   1              if(year > MAX_YEAR || year < MIN_YEAR){
 217   2                      return 0;
 218   2              }
 219   1              if(month > MAX_MONTH || month < MIN_MONTH){
 220   2                      return 0;
 221   2              }
 222   1              if(day > MAX_DAY || day < MIN_DAY){
 223   2                      return 0;
 224   2              }
 225   1              if(hour > MAX_HOUR || hour < MIN_HOUR){
 226   2                      return 0;
 227   2              }
 228   1              if(minute > MAX_MINUTE || minute < MIN_MINUTE){
 229   2                      return 0;
 230   2              }
 231   1              if(second > MAX_SECOND || second < MIN_SECOND){
 232   2                      return 0;
 233   2              }
 234   1              //如果调整的月份为2月，判断日期是否超出范围
 235   1              if(month == 2){
 236   2                      if(is_leap_year(year)){
 237   3                              if(day > FEBRUARY_LONG){
 238   4                                      return 0;
 239   4                              }
 240   3                      }else{
 241   3                              if(day > FEBRUARY_SHORT){
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 5   

 242   4                                      return 0;
 243   4                              }
 244   3                      }
 245   2              }
 246   1      
 247   1              return 1;
 248   1      }
 249          
 250          /*从存储区恢复时间*/
 251          void reset_time_from_store(){
 252   1              struct DateTime datetime;
 253   1              datetime = get_date_time(curr_date_time_arr);
 254   1              print_date_time(datetime.date,datetime.time);                           
 255   1      }
 256          
 257          /*在显示器上打印日期和时间*/
 258          void print_date_time(uchar *date,uchar *time){
 259   1              //清屏，打印日期，换行，打印时间
 260   1              write_com(0x01);        
 261   1              write_string(date);
 262   1              write_com(SECOND_LINE_FIRST_POSITION);
 263   1              write_string(time);
 264   1      }
 265          
 266          /*通过日期时间数组获得以个标准的日期时间格式字符串结构体
 267          ,如通过[2017,12,21,02,12,56]数组获得date[]="2017-12-21",time[]="02:12:56"*/
 268          struct DateTime get_date_time(uint *date_time){
 269   1              uint year,month,day,hour,minute,second;
 270   1              uchar date[13],time[12];
 271   1              struct DateTime datetime;
 272   1      
 273   1              year = date_time[0];    
 274   1              month = date_time[1];
 275   1              day = date_time[2];
 276   1              hour = date_time[3];
 277   1              minute = date_time[4];
 278   1              second = date_time[5];
 279   1              
 280   1              date[0] = ' ';
 281   1              date[1] = ' ';
 282   1              date[2] = ' ';
 283   1              date[3] = to_char(year/1000);
 284   1              date[4] = to_char(year%1000/100);
 285   1              date[5] = to_char(year%100/10);
 286   1              date[6] = to_char(year%10);
 287   1              date[7] = '-';  
 288   1              date[8] = to_char(month/10);
 289   1              date[9] = to_char(month%10);
 290   1              date[10] = '-';
 291   1              date[11] = to_char(day/10);
 292   1              date[12] = to_char(day%10);
 293   1      
 294   1              time[0] = ' ';
 295   1              time[1] = ' ';
 296   1              time[2] = ' ';
 297   1              time[3] = ' ';
 298   1              time[4] = to_char(hour/10);
 299   1              time[5] = to_char(hour%10);
 300   1              time[6] = ':';
 301   1              time[7] = to_char(minute/10);
 302   1              time[8] = to_char(minute%10);
 303   1              time[9] = ':';
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 6   

 304   1              time[10] = to_char(second/10);
 305   1              time[11] = to_char(second%10);
 306   1      
 307   1              datetime.date = date;
 308   1              datetime.time = time;
 309   1              return datetime;
 310   1      }
 311          
 312          /*左移*/ 
 313          void shift_left(){
 314   1              //移动到年份的第一位再左移定位到秒针低位
 315   1              //移动到时针高位再左移定位到天的低位
 316   1              //不移动到分隔符上
 317   1              uint curr_point;
 318   1              uchar curr_ch;
 319   1              curr_point = read_pointer();
 320   1              if(curr_point == YEAR_ONE_POSITION){
 321   2                      write_com(SECOND_LOW_POSITION);
 322   2                      return;
 323   2              }
 324   1              if(curr_point == HOUR_HIGH_POSITION){
 325   2                      write_com(DAY_LOW_POSITION);
 326   2                      return;
 327   2              }
 328   1              curr_ch = read_data_pos(curr_point-1);
 329   1              if(curr_ch == ':' || curr_ch == '-'){
 330   2                      write_com(0x10);        
 331   2              }
 332   1              write_com(0x10);                
 333   1      }
 334          
 335          /*右移*/
 336          void shift_right(){
 337   1              uint curr_point;
 338   1              uchar next_ch;
 339   1              curr_point = read_pointer();
 340   1              if(curr_point == DAY_LOW_POSITION){
 341   2                      write_com(HOUR_HIGH_POSITION);
 342   2                      return;
 343   2              }
 344   1              if(curr_point == SECOND_LOW_POSITION){
 345   2                      write_com(YEAR_ONE_POSITION);
 346   2                      return;
 347   2              }
 348   1              next_ch = read_data_pos(curr_point+1);
 349   1              //write_com(0x10);
 350   1              if(next_ch == ':' || next_ch == '-'){
 351   2                      write_com(0x14);        
 352   2              }       
 353   1      
 354   1              write_com(0x14);        
 355   1      }
 356          
 357          /*上移数字*/
 358          void digit_up(){
 359   1              uint curr_p;
 360   1              uchar curr_ch;
 361   1              curr_p = read_pointer();
 362   1              curr_ch = read_data();
 363   1              //write_com(0x10);
 364   1              write_data(to_char(get_next_digit(to_int(curr_ch),curr_p)));
 365   1              write_com(0x10);
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 7   

 366   1      }
 367          
 368          /*下移数字*/
 369          void digit_down(){
 370   1              uint curr_p;
 371   1              uchar curr_ch;
 372   1              curr_p = read_pointer();
 373   1              curr_ch = read_data();
 374   1              write_data(to_char(get_prev_digit(to_int(curr_ch),curr_p)));
 375   1              write_com(0x10);
 376   1      }
 377          
 378          /*获取下一个数字*/
 379          uint get_next_digit(uint curr_digit,uint curr_pointer){
 380   1              uint next_digit,i;
 381   1              for(i=0;i<POSITION_ARRAY_LENGTH;i++){
 382   2                      if(curr_pointer == position_arr[i]){
 383   3                              //当前数字等于最大数字，则下一个数字为最小数字，否则加1即可
 384   3                              if(curr_digit == position_max_value_arr[i]){
 385   4                                      next_digit = position_min_value_arr[i];                         
 386   4                              }else{
 387   4                                      next_digit = curr_digit + 1;
 388   4                              }
 389   3                      }
 390   2              }
 391   1              return next_digit;
 392   1      }
 393          
 394          /*获取上一个数字*/
 395          uint get_prev_digit(uint curr_digit,uint curr_pointer){
 396   1              uint prev_digit,i;
 397   1              for(i=0;i<POSITION_ARRAY_LENGTH;i++){
 398   2                      if(curr_pointer == position_arr[i]){
 399   3                              //当前数字等于最小数字，则上一个数字为最大数字，否则减1即可
 400   3                              if(curr_digit == position_min_value_arr[i]){
 401   4                                      prev_digit = position_max_value_arr[i];                         
 402   4                              }else{
 403   4                                      prev_digit = curr_digit - 1;
 404   4                              }
 405   3                      }
 406   2              }
 407   1              return prev_digit;
 408   1      }
 409          
 410          /*初始化*/
 411          void init(){
 412   1              //写入初始日期和时间
 413   1              print_date_time(DEFAULT_DATE,DEFAULT_TIME);
 414   1      }
 415          
 416          /*检查初始化数据*/
 417          uint check_init_data(){
 418   1              uchar *p_date = DEFAULT_DATE,*p_time = DEFAULT_TIME;
 419   1              if(strlen(p_date) > 16 || strlen(p_time) > 16){
 420   2                      return 1;
 421   2              }
 422   1              return 0;
 423   1      }                                                          
 424          
 425          /*定时器初始化*/
 426          void timer_init(){
 427   1              TMOD = 0x01;
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 8   

 428   1              TH0 = (65536-50000)/256;
 429   1              TL0 = (65536-50000)%256;
 430   1              EA = 1;
 431   1              ET0 = 1;
 432   1      }
 433          
 434          /*刷新时间（按照序列号）*/
 435          void refresh_time(uint seq){
 436   1              uint curr_time,next_time;
 437   1      
 438   1              switch(seq){
 439   2                      case YEAR_SEQ:
 440   2                              curr_time = read_time(YEAR_SEQ);
 441   2                              next_time = get_next_time(curr_time,YEAR_SEQ);
 442   2                              write_data_pos(YEAR_ONE_POSITION,to_char(next_time/1000));
 443   2                              write_data_pos(YEAR_TWO_POSITION,to_char(next_time%1000/100));
 444   2                              write_data_pos(YEAR_THREE_POSITION,to_char(next_time%100/10));
 445   2                              write_data_pos(YEAR_FOUR_POSITION,to_char(next_time%10));
 446   2                              break;
 447   2                      case MONTH_SEQ:
 448   2                              curr_time = read_time(MONTH_SEQ);
 449   2                              next_time = get_next_time(curr_time,MONTH_SEQ);
 450   2                              write_data_pos(MONTH_HIGH_POSITION,to_char(next_time/10));
 451   2                              write_data_pos(MONTH_LOW_POSITION,to_char(next_time%10));
 452   2                              if(next_time == MIN_MONTH){
 453   3                                      refresh_time(YEAR_SEQ);
 454   3                              }
 455   2                              break;
 456   2                      case DAY_SEQ:
 457   2                              curr_time = read_time(DAY_SEQ);
 458   2                              next_time = get_next_time(curr_time,DAY_SEQ);
 459   2                              write_data_pos(DAY_HIGH_POSITION,to_char(next_time/10));
 460   2                              write_data_pos(DAY_LOW_POSITION,to_char(next_time%10));
 461   2                              if(next_time == MIN_DAY){
 462   3                                      refresh_time(MONTH_SEQ);
 463   3                              }
 464   2                              break;
 465   2                      case WEEK_SEQ:
 466   2                              //暂时不作处理
 467   2                              break;
 468   2                      case HOUR_SEQ:
 469   2                              curr_time = read_time(HOUR_SEQ);
 470   2                              next_time = get_next_time(curr_time,HOUR_SEQ);
 471   2                              write_data_pos(HOUR_HIGH_POSITION,to_char(next_time/10));
 472   2                              write_data_pos(HOUR_LOW_POSITION,to_char(next_time%10));
 473   2                              if(next_time == MIN_HOUR){
 474   3                                      refresh_time(DAY_SEQ);
 475   3                              }
 476   2                              break;
 477   2                      case MINUTE_SEQ:
 478   2                              curr_time = read_time(MINUTE_SEQ);
 479   2                              next_time = get_next_time(curr_time,MINUTE_SEQ);
 480   2                              write_data_pos(MINUTE_HIGH_POSITION,to_char(next_time/10));
 481   2                              write_data_pos(MINUTE_LOW_POSITION,to_char(next_time%10));
 482   2                              if(next_time == MIN_MINUTE){
 483   3                                      refresh_time(HOUR_SEQ);
 484   3                              }
 485   2                              break;
 486   2                      case SECOND_SEQ:
 487   2                              curr_time = read_time(SECOND_SEQ);
 488   2                              next_time = get_next_time(curr_time,SECOND_SEQ);
 489   2                              write_data_pos(SECOND_HIGH_POSITION,to_char(next_time/10));
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 9   

 490   2                              write_data_pos(SECOND_LOW_POSITION,to_char(next_time%10));
 491   2                              if(next_time == MIN_SECOND){
 492   3                                      refresh_time(MINUTE_SEQ);
 493   3                              }
 494   2                              break;
 495   2                      default:
 496   2                              break;
 497   2              }
 498   1      }
 499          
 500          
 501          /*根据序列号（已给出）读取任一时间（年月日时分秒）*/
 502          uint read_time(uint seq){
 503   1              uint time_high,time_low;
 504   1              //年份特殊处理
 505   1              uint year_one,year_two,year_three,year_four;
 506   1              switch(seq){
 507   2                      case YEAR_SEQ:
 508   2                              year_one = YEAR_ONE_POSITION;
 509   2                              year_two = YEAR_TWO_POSITION;
 510   2                              year_three = YEAR_THREE_POSITION;
 511   2                              year_four = YEAR_FOUR_POSITION;
 512   2                              return to_int(read_data_pos(year_one))*1000 + to_int(read_data_pos(year_two))*100 
 513   2                                              + to_int(read_data_pos(year_three))*10 + to_int(read_data_pos(year_four));
 514   2                              break;
 515   2                      case MONTH_SEQ:
 516   2                              time_high = MONTH_HIGH_POSITION;
 517   2                              time_low = MONTH_LOW_POSITION;
 518   2                              break;
 519   2                      case DAY_SEQ:
 520   2                              time_high =DAY_HIGH_POSITION;
 521   2                              time_low = DAY_LOW_POSITION;
 522   2                              break;
 523   2                      case WEEK_SEQ:
 524   2                              //暂时不作处理
 525   2                              //time_high = WEEK_HIGH_POSITION;
 526   2                              //time_low = WEEK_LOW_POSITION;
 527   2                              break;
 528   2                      case HOUR_SEQ:
 529   2                              time_high = HOUR_HIGH_POSITION;
 530   2                              time_low = HOUR_LOW_POSITION;
 531   2                              break;
 532   2                      case MINUTE_SEQ:
 533   2                              time_high = MINUTE_HIGH_POSITION;
 534   2                              time_low = MINUTE_LOW_POSITION;
 535   2                              break;
 536   2                      case SECOND_SEQ:
 537   2                              time_high = SECOND_HIGH_POSITION;
 538   2                              time_low = SECOND_LOW_POSITION;
 539   2                              break;
 540   2                      default:
 541   2                              break;
 542   2              }
 543   1              //读取数据
 544   1              return to_int(read_data_pos(time_high))*10 + to_int(read_data_pos(time_low));
 545   1      }
 546          
 547          /*获取下一个时刻*/
 548          uint get_next_time(uint time,uint seq){
 549   1              uint next_time,curr_mon;
 550   1              switch(seq){
 551   2                      case YEAR_SEQ:
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 10  

 552   2                              if(time == MAX_YEAR){
 553   3                                      next_time = MIN_YEAR;
 554   3                              }else{
 555   3                                      next_time = time + 1;
 556   3                              }
 557   2                              break;
 558   2                      case MONTH_SEQ:
 559   2                              if(time == MAX_MONTH){
 560   3                                      next_time = MIN_MONTH;
 561   3                              }else{
 562   3                                      next_time = time + 1;
 563   3                              }
 564   2                              break;
 565   2                      case DAY_SEQ:
 566   2                              if(is_leap_year(read_time(YEAR_SEQ))){
 567   3                                      month_day_arr[1] = FEBRUARY_LONG;
 568   3                              }else{
 569   3                                      month_day_arr[1] = FEBRUARY_SHORT;
 570   3                              }
 571   2                              curr_mon = read_time(MONTH_SEQ);
 572   2                              if(time == month_day_arr[curr_mon-1]){
 573   3                                      next_time = MIN_DAY;
 574   3                              }else{
 575   3                                      next_time = time + 1;
 576   3                              }
 577   2                              break;
 578   2                      case WEEK_SEQ:
 579   2                              //暂时不作处理
 580   2                              //time_high = WEEK_HIGH_POSITION;
 581   2                              //time_low = WEEK_LOW_POSITION;
 582   2                              break;
 583   2                      case HOUR_SEQ:
 584   2                              if(time == MAX_HOUR){
 585   3                                      next_time = MIN_HOUR;
 586   3                              }else{
 587   3                                      next_time = time + 1;
 588   3                              }
 589   2                              break;
 590   2                      case MINUTE_SEQ:
 591   2                              if(time == MAX_MINUTE){
 592   3                                      next_time = MIN_MINUTE;
 593   3                              }else{
 594   3                                      next_time = time + 1;
 595   3                              }
 596   2                              break;
 597   2                      case SECOND_SEQ:
 598   2                              if(time == MAX_SECOND){
 599   3                                      next_time = MIN_SECOND;
 600   3                              }else{
 601   3                                      next_time = time + 1;
 602   3                              }
 603   2                              break;
 604   2                      default:
 605   2                              break;
 606   2              }
 607   1              
 608   1              return next_time;               
 609   1      }
 610          
 611          /**********************************************COMMON*****************************************************
             -/
 612          
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 11  

 613          /*延时*/
 614          void delay(uint time){
 615   1              uint x,y;
 616   1              for(x=0;x<time;x++){
 617   2                      for(y=0;y<100;y++);
 618   2              }
 619   1      }
 620          
 621          /*字符转数字*/
 622          uint to_int(uchar ch){
 623   1              return ch - 48;
 624   1      }
 625          
 626          /*数字转字符*/
 627          uchar to_char(uint i){
 628   1              return i + 48;
 629   1      }
 630          
 631          /*判断当年是否为闰年*/
 632          uint is_leap_year(uint year){
 633   1              if((year%4==0 && year%100!=0) || year%400==0){
 634   2                      return 1;       
 635   2              }
 636   1              return 0;
 637   1      }
 638          
 639          
 640          /*********************************1602**********************************************/
 641          
 642          /*1602片初始化*/
 643          void display_init(){
 644   1              en = 0;
 645   1              //默认为写操作
 646   1              rw = 0;
 647   1              //基础设置
 648   1              write_com(0x38);
 649   1              //显示打开，不显示光标
 650   1              write_com(0x0c);
 651   1              //读写一个字符指针和光标同时加1
 652   1              write_com(0x06);
 653   1              //清屏
 654   1              write_com(0x01);
 655   1              //从第一个位开始写
 656   1              write_com(0x80);
 657   1      }
 658          
 659          /*写指令*/
 660          void write_com(uchar com){
 661   1              rw = 0;
 662   1              rs = 0;
 663   1              P0 = com;
 664   1              delay(1);
 665   1              en = 1;
 666   1              delay(1);
 667   1              en = 0;
 668   1      }
 669          
 670          /*写数据*/        
 671          void write_data(uchar datas){
 672   1              rw = 0;
 673   1              rs = 1;
 674   1              P0 = datas;
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 12  

 675   1              delay(1);
 676   1              en = 1;
 677   1              delay(1);
 678   1              en = 0;
 679   1      }
 680          
 681          /*在指定位置写数据*/
 682          void write_data_pos(uint pos,uchar datas){
 683   1              write_com(pos);
 684   1              write_data(datas);
 685   1      }
 686          
 687          /*写入字符串数据*/
 688          void write_string(char *str){
 689   1              while(*str){
 690   2                      write_data(*str);
 691   2                      str++;
 692   2              }
 693   1      }
 694          
 695          /*读取数据（默认读取当前光标处的数据）*/
 696          uchar read_data(){
 697   1              uchar c = 0;
 698   1              P0 = 0xff;  //为什么?
 699   1              rw = 1;
 700   1              rs = 1;
 701   1              delay(1);
 702   1              en = 1;
 703   1              //delay(1);
 704   1              c = P0;
 705   1              en = 0;
 706   1              //读取数据后，将光标拉回
 707   1              write_com(0x10);
 708   1              return c;
 709   1      }
 710          
 711          /*读取指定位置的数据*/
 712          uchar read_data_pos(uint pos){
 713   1              uchar c;
 714   1              uint pointer = read_pointer();
 715   1              write_com(pos);
 716   1              c = read_data();
 717   1              write_com(pointer);
 718   1              return c;
 719   1      }
 720          
 721          /*读取当前指针的位置*/
 722          uint read_pointer(){
 723   1              uint read_pointer = 0;
 724   1              P0 = 0xff; 
 725   1              rw = 1;
 726   1              rs = 0;
 727   1              delay(5);
 728   1              en = 1;
 729   1              delay(5);
 730   1              read_pointer = P0;
 731   1              en = 0;
 732   1              return read_pointer+BASIC_POSITION;     
 733   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 12:28:03 PAGE 13  

   CODE SIZE        =   2772    ----
   CONSTANT SIZE    =    144    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13     112
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
