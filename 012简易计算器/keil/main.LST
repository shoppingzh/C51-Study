C51 COMPILER V9.01   MAIN                                                                  06/28/2017 16:21:26 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg51.h>
   2          #include <stdio.h>
   3          #include <intrins.h>
   4          
   5          #define uchar unsigned char
   6          #define uint unsigned int
   7          
   8          //矩阵键盘端口
   9          #define KEY_BOARD_PORT P1
  10          //1602数据端口
  11          #define DISPLAY_OUT P2
  12          //1602初始地址
  13          #define BASIC_POSITION 0x80
  14          #define SEC_LINE_POSITION BASIC_POSITION+0x40
  15          
  16          void delay(uchar time);
  17          void display_init();
  18          void init();
  19          uchar key_scan();
  20          void reset();
  21          uint check(uchar ch);
  22          uchar get_char(uchar key);
  23          int calculate(uchar* contents);
  24          uchar* to_string(int result);
  25          uchar is_operator(uchar ch);
  26          
  27          void write_com(uchar com);
  28          void write_data(uchar datas);
  29          void write_data_pos(uint pos,uchar datas);
  30          void write_string(uchar *str);
  31          uchar read_data();
  32          uchar read_data_pos(uint pos);
  33          uint read_pointer();
  34          
  35          sbit P10 = P1^0;
  36          sbit P11 = P1^1;
  37          sbit P12 = P1^2;
  38          sbit P13 = P1^3;
  39          
  40          //1602
  41          sbit en = P3^5;
  42          sbit rs = P3^6;
  43          sbit rw = P3^7;
  44          
  45          //键盘编码
  46          uchar code key_pad_code[] = {0x7e,0x7d,0xbe,0xbd,0xbb,0xde,0xdd,0xdb,0xee,0xed,0xeb,0x77,0xb7,0xd7,0xe7,0x
             -7b};
  47          //键盘编码所表示的字符
  48          uchar code key_match_ch[] = {'c','0','1','2','3','4','5','6','7','8','9','+','-','*','/','='};
  49          
  50          //一次计算的内容
  51          uchar contents[16];
  52          //当前位置
  53          uint pos = 0;
  54          
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 16:21:26 PAGE 2   

  55          //当前计算结果
  56          int result;
  57          
  58          void main(){
  59   1      
  60   1              uchar key;
  61   1              init();
  62   1      
  63   1              while(1){
  64   2                      uchar curr_ch;
  65   2                      int result;             
  66   2                      key = key_scan();
  67   2                      P0 = key;
  68   2      
  69   2                      switch(key){
  70   3                              // on/c
  71   3                              case 0x7e: 
  72   3                                      //按下清零键，清屏
  73   3                                      write_com(0x01);
  74   3                                      delay(10);
  75   3                                      write_data_pos(BASIC_POSITION,'0');
  76   3                                      reset();
  77   3                                      break;
  78   3                              // 0
  79   3                              case 0x7d:
  80   3                              // 1
  81   3                              case 0xbe:
  82   3                              // 2
  83   3                              case 0xbd:
  84   3                              // 3
  85   3                              case 0xbb:
  86   3                              // 4
  87   3                              case 0xde:
  88   3                              // 5
  89   3                              case 0xdd:
  90   3                              // 6
  91   3                              case 0xdb:
  92   3                              // 7
  93   3                              case 0xee:
  94   3                              // 8
  95   3                              case 0xed:
  96   3                              // 9
  97   3                              case 0xeb:
  98   3                              // +
  99   3                              case 0x77:
 100   3                              // -
 101   3                              case 0xb7:
 102   3                              // *
 103   3                              case 0xd7:
 104   3                              // /
 105   3                              case 0xe7:
 106   3                                      curr_ch = get_char(key);
 107   3                                      //控制程序不允许出现'01'这样的数值
 108   3                                      if(curr_ch != '0' && contents[pos-1] == '0' && is_operator(contents[pos-2])){
 109   4                                              write_com(read_pointer()-1);
 110   4                                      }
 111   3                                      if(check(curr_ch)){
 112   4                                              if(pos == 0){
 113   5                                                      //可以重写
 114   5                                                      write_com(0x01);
 115   5                                                      delay(10);
 116   5                                                      write_data_pos(BASIC_POSITION,curr_ch);
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 16:21:26 PAGE 3   

 117   5                                              }else{
 118   5                                                      write_data(curr_ch);
 119   5                                              }
 120   4                                              contents[pos++] = curr_ch;      
 121   4                                      }
 122   3                                      break;
 123   3                              // =
 124   3                              case 0x7b:
 125   3                                      result = calculate(contents);
 126   3                                      //P0 = result;
 127   3                                      write_data_pos(SEC_LINE_POSITION,'=');
 128   3                                      write_string(to_string(result));
 129   3                                      //计算完成，重置
 130   3                                      reset();
 131   3                                      break; 
 132   3                      }               
 133   2              }
 134   1              
 135   1      
 136   1      }
 137          
 138          /*将当前结果转换为字符串*/
 139          uchar* to_string(int result){
 140   1              uchar* result_str;
 141   1              sprintf(result_str,"%d",result);
 142   1              return result_str;
 143   1      }
 144          
 145          /*计算当前内容的运算结果*/
 146          int calculate(uchar* contents){
 147   1              // op_idx：运算符的位置
 148   1              int i,op_idx;
 149   1              uint head = 0,tail = 0,k;
 150   1              if(pos == 0){
 151   2                      return result;
 152   2              }
 153   1              //找出运算符位置
 154   1              for(i=0;i<pos;i++){
 155   2                      if(is_operator(contents[i])){
 156   3                              op_idx = i;
 157   3                              break;
 158   3                      }       
 159   2              }
 160   1      
 161   1              //计算头操作数
 162   1              k = 1;
 163   1              for(i=op_idx-1;i>=0;i--){
 164   2                      uint digit = contents[i] - 48;
 165   2                      head += (k * digit);
 166   2              //      P0 = head;
 167   2                      k *= 10;                
 168   2              }
 169   1              
 170   1              //计算尾操作数
 171   1              k = 1;
 172   1              for(i=pos-1;i>op_idx;i--){
 173   2                      tail += k * (contents[i] - 48);
 174   2                      k *= 10;
 175   2              }
 176   1      
 177   1              //计算
 178   1              switch(contents[op_idx]){
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 16:21:26 PAGE 4   

 179   2                      case '+':
 180   2                              result = head + tail;
 181   2                              break;
 182   2                      case '-':
 183   2                              result = head - tail;
 184   2                              break;
 185   2                      case '*':
 186   2                              result = head * tail;
 187   2                              break;
 188   2                      case '/':
 189   2                              result = head / tail;
 190   2                              break;
 191   2              }
 192   1      
 193   1              return result;
 194   1      }
 195          
 196          /*根据键盘编码值获取对应字符*/
 197          uchar get_char(uchar key){
 198   1              uchar i;
 199   1              for(i=0;i<16;i++){
 200   2                      if(key == key_pad_code[i]){
 201   3                              return key_match_ch[i];
 202   3                      }
 203   2              }
 204   1              return '\0';
 205   1      }
 206          
 207          /*判断当前字符是否为运算符*/
 208          uchar is_operator(uchar ch){
 209   1              if(ch == '+' || ch == '-' || ch == '*' || ch == '/'){
 210   2                      return 1;       
 211   2              }
 212   1              return 0;
 213   1      }
 214          
 215          /*检查是否可以将按键内容存储以及是否可以打印在显示屏上*/
 216          uint check(uchar ch){
 217   1              uint op_count = 0,i;
 218   1              //总运算长度不能超过16
 219   1              if(pos > 16){
 220   2                      return 0;
 221   2              }
 222   1              //上一个字符是0，则下一个字符不能还为0
 223   1              if(contents[pos-1] == '0' && ch == '0'){
 224   2                      return 0;
 225   2              }
 226   1              //第一个输入的数不能是运算符和0
 227   1              if(pos == 0 && (is_operator(ch) || ch == '0') ){
 228   2                      return 0;
 229   2              }       
 230   1              for(i=0;i<pos;i++){
 231   2                      if(is_operator(contents[i])){
 232   3                              op_count++;
 233   3                      } 
 234   2              }
 235   1              //当前运算已有运算符，则不能再按运算符
 236   1              if(op_count >= 1 && is_operator(ch)){
 237   2                      return 0;
 238   2              }
 239   1              return 1;
 240   1      }
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 16:21:26 PAGE 5   

 241          
 242          /*重置，开始下一个运算*/
 243          void reset(){
 244   1              uchar i;
 245   1              write_com(BASIC_POSITION);
 246   1              pos = 0;
 247   1              for(i=0;i<pos;i++){
 248   2                      contents[i] = '\0';
 249   2              }
 250   1      }
 251          
 252          /*1602片初始化*/
 253          void display_init(){
 254   1              en = 0;
 255   1              //默认为写操作
 256   1              rw = 0;
 257   1              //基础设置
 258   1              write_com(0x38);
 259   1              //显示打开，不显示光标
 260   1              write_com(0x0c);
 261   1              //write_com(0x0f);
 262   1              //读写一个字符指针和光标同时加1
 263   1              write_com(0x06);
 264   1              //清屏
 265   1              write_com(0x01);
 266   1              //从第一个位开始写
 267   1              write_com(0x80);
 268   1      }
 269          
 270          /*系统初始化*/
 271          void init(){
 272   1              display_init();
 273   1              delay(100);
 274   1              write_string("000000");
 275   1      }
 276          
 277          /*键盘扫描*/
 278          uchar key_scan(){  
 279   1              uchar key,i;
 280   1              KEY_BOARD_PORT = 0x0f;
 281   1              if((KEY_BOARD_PORT & 0x0f) == 0x0f){
 282   2                      return -1;
 283   2              }
 284   1              delay(1);
 285   1      
 286   1              for(i=0;i<4;i++){
 287   2                      KEY_BOARD_PORT = _cror_(0x7f,i);
 288   2                      if(P10 == 0) break;
 289   2                      if(P11 == 0) break;
 290   2                      if(P12 == 0) break;
 291   2                      if(P13 == 0) break;
 292   2              }
 293   1              key = KEY_BOARD_PORT;
 294   1              for(;KEY_BOARD_PORT!=0x0f;KEY_BOARD_PORT=0x0f) ;
 295   1              //while((KEY_BOARD_PORT & 0x0f) == 0x0f);
 296   1              return key;
 297   1      }
 298          
 299          /*延时*/
 300          void delay(uchar time){
 301   1              uchar x,y;
 302   1              for(x=0;x<time;x++){
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 16:21:26 PAGE 6   

 303   2                      for(y=0;y<50;y++);
 304   2              }
 305   1      }
 306          
 307          /*--------------------------------------------------1602--------------------------------------------------
             -*/
 308          
 309          /*写指令*/
 310          void write_com(uchar com){
 311   1              rw = 0;
 312   1              rs = 0;
 313   1              DISPLAY_OUT = com;
 314   1              delay(1);
 315   1              en = 1;
 316   1              delay(1);
 317   1              en = 0;
 318   1      }
 319          
 320          /*写数据*/        
 321          void write_data(uchar datas){
 322   1              rw = 0;
 323   1              rs = 1;
 324   1              DISPLAY_OUT = datas;
 325   1              delay(1);
 326   1              en = 1;
 327   1              delay(1);
 328   1              en = 0;
 329   1      }
 330          
 331          /*在指定位置写数据*/
 332          void write_data_pos(uint pos,uchar datas){
 333   1              write_com(pos);
 334   1              write_data(datas);
 335   1      }
 336          
 337          /*写入字符串数据*/
 338          void write_string(char *str){
 339   1              while(*str){
 340   2                      write_data(*str);
 341   2                      str++;
 342   2              }
 343   1      }
 344          
 345          /*读取数据（默认读取当前光标处的数据）*/
 346          uchar read_data(){
 347   1              uchar c = 0;
 348   1              DISPLAY_OUT = 0xff;  //为什么?
 349   1              rw = 1;
 350   1              rs = 1;
 351   1              delay(1);
 352   1              en = 1;
 353   1              //delay(1);
 354   1              c = DISPLAY_OUT;
 355   1              en = 0;
 356   1              //读取数据后，将光标拉回
 357   1              write_com(0x10);
 358   1              return c;
 359   1      }
 360          
 361          /*读取指定位置的数据*/
 362          uchar read_data_pos(uint pos){
 363   1              uchar c;
C51 COMPILER V9.01   MAIN                                                                  06/28/2017 16:21:26 PAGE 7   

 364   1              uint pointer = read_pointer();
 365   1              write_com(pos);
 366   1              c = read_data();
 367   1              write_com(pointer);
 368   1              return c;
 369   1      }
 370          
 371          /*读取当前指针的位置*/
 372          uint read_pointer(){
 373   1              uint read_pointer = 0;
 374   1              DISPLAY_OUT = 0xff; 
 375   1              rw = 1;
 376   1              rs = 0;
 377   1              delay(5);
 378   1              en = 1;
 379   1              delay(5);
 380   1              read_pointer = DISPLAY_OUT;
 381   1              en = 0;
 382   1              return read_pointer+BASIC_POSITION;     
 383   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1091    ----
   CONSTANT SIZE    =     42    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
